import os
import asyncio
import random
import aiosqlite
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, FSInputFile, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton
)

from db import init_db, get_saints_by_day

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ENV = os.getenv("ENV", "prod")
PROD_CHANNEL_ID = os.getenv("PROD_CHANNEL_ID")
TEST_CHANNEL_ID = os.getenv("TEST_CHANNEL_ID")
CHANNEL_ID = TEST_CHANNEL_ID if ENV == "test" else PROD_CHANNEL_ID
BOT_USERNAME = os.getenv("BOT_USERNAME")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# --- –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–ª—é—á–∞–º–∏ (–¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö callback_data) ---
gratitude_structure = {
    "close": ["üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –°–µ–º—å—è", "üë∂ –î–µ—Ç–∏", "ü§ù –î—Ä—É–∑—å—è", "üßô‚Äç‚ôÇÔ∏è –ù–∞—Å—Ç–∞–≤–Ω–∏–∫–∏"],
    "spiritual": ["üïäÔ∏è –í–µ—Ä–∞", "üõê –°–≤—è—Ç—ã–µ", "ü§≤ –ü—Ä–æ—â–µ–Ω–∏–µ", "üåü –ë–æ–∂—å–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å—Ç–≤–æ"],
    "daily": ["üå≥ –ü—Ä–∏—Ä–æ–¥–∞", "üè° –î–æ–º", "üí™ –ó–¥–æ—Ä–æ–≤—å–µ", "üåû –ö–∞–∂–¥—ã–π –¥–µ–Ω—å", "üçû –•–ª–µ–± –Ω–∞—Å—É—â–Ω—ã–π"],
    "special": ["‚ù§Ô∏è –õ—é–±–æ–≤—å", "ü§ó –ü–æ–º–æ—â—å –≤ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è—Ö", "üß™ –£—Ä–æ–∫–∏ –∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è", "üéâ –†–∞–¥–æ—Å—Ç—å"]
}

category_titles = {
    "close": "üìÇ –ë–ª–∏–∑–∫–∏–µ",
    "spiritual": "‚úù –î—É—Ö–æ–≤–Ω–æ–µ",
    "daily": "üåø –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–µ",
    "special": "üéÅ –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏"
}

# --- /start gratitude ---
@router.message(F.text.startswith("/start gratitude"))
async def handle_start_gratitude(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=category_titles[key], callback_data=f"gratitude_cat:{key}")]
        for key in gratitude_structure
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ ---
@router.callback_query(F.data.startswith("gratitude_cat:"))
async def handle_gratitude_category(callback: CallbackQuery):
    category_key = callback.data.split(":")[1]
    subcategories = gratitude_structure.get(category_key, [])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=sub, callback_data=f"gratitude_sub:{category_key}:{i}")]
        for i, sub in enumerate(subcategories)
    ])
    title = category_titles.get(category_key, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
    await callback.message.edit_text(f"üî∏ {title}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("gratitude_sub:"))
async def handle_gratitude_subcategory(callback: CallbackQuery):
    _, category_key, index_str = callback.data.split(":")
    index = int(index_str)
    subcategory_name = gratitude_structure[category_key][index]
    category_full = category_titles[category_key]

    async with aiosqlite.connect("gratitude.db") as db:
        cursor = await db.execute(
            "SELECT text FROM gratitude WHERE category = ? AND subcategory = ?",
            (category_full, subcategory_name)
        )
        results = await cursor.fetchall()

    if results:
        text = random.choice(results)[0]
        await callback.message.edit_text(f"‚ú® {text}")
    else:
        await callback.message.edit_text("üôè –ü–æ–∫–∞ –Ω–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–µ–π –≤ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    await callback.answer()

# --- –ü–æ—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π (–≤ –∫–∞–Ω–∞–ª) ---
@router.message(F.text == "/post_gratitude_button")
async def post_gratitude_button(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üôè –£—á–∏–º—Å—è –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å",
            url=f"https://t.me/{BOT_USERNAME}?start=gratitude"
        )]
    ])
    await bot.send_message(CHANNEL_ID, "‚ú® –ù—É–∂–Ω—ã —Å–ª–æ–≤–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=keyboard)
    await message.answer("‚úÖ –ö–Ω–æ–ø–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª.")

# --- –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–≤—è—Ç—ã—Ö ---
@router.message(F.text.startswith("/post"))
async def handle_post_command(message: Message):
    if message.chat.type != "private":
        await message.reply("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return
    try:
        _, day = message.text.strip().split(" ")
    except ValueError:
        await message.reply("–§–æ—Ä–º–∞—Ç: /post MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: /post 06-15)")
        return
    saints = await get_saints_by_day(day)
    if not saints:
        await message.reply("‚õî –ù–∞ —ç—Ç—É –¥–∞—Ç—É –≤ –±–∞–∑–µ –Ω–µ—Ç —Å–≤—è—Ç—ã—Ö.")
        return
    me = await bot.get_me()
    for saint in saints:
        saint_id = saint[0]
        name = saint[2]
        life = saint[3]
        prayer = saint[4]
        when_to_pray = saint[5]
        icon = saint[6]
        preamble = saint[7]
        prayer_church_slavonic = saint[8]
        prayer_rule = saint[9]
        dativ = saint[10] if len(saint) > 10 else name
        image_path = f"images/{icon}"
        caption = f"üïäÔ∏è *{name}*\n\nüôè {prayer}"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìñ –ñ–∏—Ç–∏–µ", url=f"https://t.me/{BOT_USERNAME}?start=life_{saint_id}"),
                InlineKeyboardButton(text="üïØ –°–≤–µ—á–∞", url=f"https://t.me/{BOT_USERNAME}?start=candle_{saint_id}")
            ],
            [
                InlineKeyboardButton(text="üôè‚ùì –ö–æ–≥–¥–∞ –º–æ–ª–∏—Ç—å—Å—è", url=f"https://t.me/{BOT_USERNAME}?start=when_{saint_id}")
            ],
            [
                InlineKeyboardButton(text="üìò –ú–æ–ª–∏—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ", url=f"https://t.me/{BOT_USERNAME}?start=rule_{saint_id}")
            ]
        ])
        try:
            if preamble:
                await bot.send_message(CHANNEL_ID, f"üìú{preamble}")
            if os.path.exists(image_path):
                photo = FSInputFile(image_path)
                await bot.send_photo(chat_id=CHANNEL_ID, photo=photo, caption=caption, reply_markup=keyboard, parse_mode="Markdown")
            else:
                await bot.send_message(chat_id=CHANNEL_ID, text=caption, reply_markup=keyboard, parse_mode="Markdown")
        except Exception as e:
            await bot.send_message(chat_id=CHANNEL_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    await message.reply("‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

# --- /start ---
@router.message(F.text.startswith("/start"))
async def handle_start(message: Message):
    if message.chat.type != "private":
        return

    parts = message.text.strip().split()

    if len(parts) == 2:
        param = parts[1]

        if "_" in param:
            action, saint_id = param.split("_", 1)

            async with aiosqlite.connect("saints.db") as db:
                cursor = await db.execute("SELECT * FROM saints WHERE id = ?", (saint_id,))
                saint = await cursor.fetchone()

            if not saint:
                await message.answer("‚ùå –°–≤—è—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            name = saint[2]
            dativ = saint[10] if len(saint) > 10 else name

            if action == "life":
                await message.answer(f"üìñ *–ñ–∏—Ç–∏–µ* {name}:\n\n{saint[3]}")
            elif action == "candle":
                gif = FSInputFile("media/candle.gif")
                await message.answer_animation(gif, caption=f"üïØ –ú–æ–ª–∏—Ç–≤–µ–Ω–Ω–∞—è —Å–≤–µ—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ {dativ}.")
            elif action == "when":
                await message.answer(f"üìå *–ö–æ–≥–¥–∞ –º–æ–ª–∏—Ç—å—Å—è* ({name}):\n\n{saint[5]}")
            elif action == "rule":
                await message.answer(f"üìò *–ú–æ–ª–∏—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ* {dativ}:\n\n{saint[9]}")
            else:
                await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        elif param == "gratitude":
            # –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=category_titles[key], callback_data=f"gratitude_cat:{key}")]
                for key in gratitude_structure
            ])
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏:", reply_markup=keyboard)
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã—Ö —Å–≤—è—Ç—ã—Ö.\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´üôè –£—á–∏–º—Å—è –±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å¬ª –∏ –Ω–∞—á–Ω–∏ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏."
        )
# --- MAIN ---
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
