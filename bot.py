import os
import asyncio
import aiosqlite
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

from db import init_db, get_saints_by_day

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()
router = Router()
dp.include_router(router)


@router.message(F.text.startswith("/post"))
async def handle_post_command(message: Message):
    if message.chat.type != "private":
        await message.reply("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")
        return

    try:
        _, day = message.text.strip().split(" ")
    except ValueError:
        await message.reply("–§–æ—Ä–º–∞—Ç: /post MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: /post 06-15)")
        return

    saints = await get_saints_by_day(day)
    if not saints:
        await message.reply("‚õî –ù–∞ —ç—Ç—É –¥–∞—Ç—É –≤ –±–∞–∑–µ –Ω–µ—Ç —Å–≤—è—Ç—ã—Ö.")
        return

    me = await bot.get_me()

    for saint in saints:
        saint_id = saint[0]
        name = saint[2]
        life = saint[3]
        prayer = saint[4]
        when_to_pray = saint[5]
        icon = saint[6]
        preamble = saint[7]
        prayer_church_slavonic = saint[8]
        prayer_rule = saint[9]
        dativ = saint[10] if len(saint) > 10 else name

        image_path = f"images/{icon}"
        caption = f"üïäÔ∏è *{name}*\n\nüôè {prayer}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìñ –ñ–∏—Ç–∏–µ", url=f"https://t.me/{me.username}?start=life_{saint_id}"),
                InlineKeyboardButton(text="üïØ –°–≤–µ—á–∞", url=f"https://t.me/{me.username}?start=candle_{saint_id}")
            ],
            [
                InlineKeyboardButton(text="üôè‚ùì –ö–æ–≥–¥–∞ –º–æ–ª–∏—Ç—å—Å—è", url=f"https://t.me/{me.username}?start=when_{saint_id}")
            ],
            [
                InlineKeyboardButton(text="üìò –ú–æ–ª–∏—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ", url=f"https://t.me/{me.username}?start=rule_{saint_id}")
            ]
        ])

        try:
            # üëá –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–∞–º–±—É–ª—É –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–≤—è—Ç–æ–≥–æ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if preamble:
                await bot.send_message(CHANNEL_ID, f"üìú{preamble}")

            if os.path.exists(image_path):
                photo = FSInputFile(image_path)
                await bot.send_photo(chat_id=CHANNEL_ID, photo=photo, caption=caption, reply_markup=keyboard, parse_mode="Markdown")
            else:
                await bot.send_message(chat_id=CHANNEL_ID, text=caption, reply_markup=keyboard, parse_mode="Markdown")
        except Exception as e:
            await bot.send_message(chat_id=CHANNEL_ID, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    await message.reply("‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


@router.message(F.text.startswith("/start"))
async def handle_start(message: Message):
    if message.chat.type != "private":
        return

    parts = message.text.strip().split()
    if len(parts) == 2:
        param = parts[1]
        if "_" not in param:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            return

        action, saint_id = param.split("_")

        async with aiosqlite.connect("saints.db") as db:
            cursor = await db.execute("SELECT * FROM saints WHERE id = ?", (saint_id,))
            saint = await cursor.fetchone()

        if not saint:
            await message.answer("‚ùå –°–≤—è—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        name = saint[2]
        dativ = saint[10] if len(saint) > 10 else name

        if action == "life":
            await message.answer(f"üìñ *–ñ–∏—Ç–∏–µ* {name}:\n\n{saint[3]}")
        elif action == "church":
            await message.answer(f"üìú *–ú–æ–ª–∏—Ç–≤–∞ –Ω–∞ —Ü–µ—Ä–∫–æ–≤–Ω–æ—Å–ª–∞–≤—è–Ω—Å–∫–æ–º* ({name}):\n\n{saint[8]}")
        elif action == "rule":
            await message.answer(f"üìò *–ö—Ä–∞—Ç–∫–æ–µ –º–æ–ª–∏—Ç–≤–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ* {dativ}:\n\n{saint[9]}")
        elif action == "when":
            await message.answer(f"üìå *–ö–æ–≥–¥–∞ –º–æ–ª–∏—Ç—å—Å—è* ({name}):\n\n{saint[5]}")
        elif action == "candle":
            candle_gif = FSInputFile("media/candle.gif")
            await message.answer_animation(animation=candle_gif, caption=f"üïØ –ú–æ–ª–∏—Ç–≤–µ–Ω–Ω–∞—è —Å–≤–µ—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ {dativ}.")
        elif action == "ask":
            await message.answer(f"‚úâÔ∏è –í –±—É–¥—É—â–µ–º —Ç—É—Ç –±—É–¥–µ—Ç AI-–ø–æ–º–æ—â–Ω–∏–∫, –ø–æ–¥–±–∏—Ä–∞—é—â–∏–π —Å–≤—è—Ç–æ–≥–æ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—é –º–æ–ª–∏—Ç–≤—ã.")
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã—Ö —Å–≤—è—Ç—ã—Ö. "
            "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º —Å–≤—è—Ç—ã–º –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ."
        )


async def main():
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())





